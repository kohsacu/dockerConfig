# This is a basic configuration file, which contains boilerplate options and
# some basic examples. It allows the BIRD daemon to start but will not cause
# anything else to happen.
#
# Please refer to the BIRD User's Guide documentation, which is also available
# online at http://bird.network.cz/ in HTML format, for more information on
# configuring BIRD and adding routing protocols.

# Configure logging
log syslog all;
# log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

# Set router ID. It is a unique identification of your router, usually one of
# IPv4 addresses of the router. It is recommended to configure it explicitly.
#router id 10.10.11.10; # bird-A-0
#router id 10.10.11.11; # bird-A-1
#router id 10.10.11.12; # bird-B-0
#router id 10.10.11.13; # bird-B-1
#router id 10.10.11.14; # bird-ToR-0
#router id 10.10.11.15; # bird-ToR-1

# You can define your own constants
# define my_asn = 65000;
# define my_addr = 198.51.100.1;
define my_asn0 = 65432;
define my_asn1 = 65433;

#table ibgp0; # internal BGP peerings

# Tables master4 and master6 are defined by default
# ipv4 table master4;
# ipv6 table master6;

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device device_link {
    scan time 10;
}

# The direct protocol is not a real routing protocol. It automatically generates
# direct routes to all network interfaces. Can exist in as many instances as you
# wish if you want to populate multiple routing tables with direct routes.
protocol direct direct_ipv4 {
#	disabled;		# Disable by default
    ipv4;			# Connect to default IPv4 table
#	ipv6;			# ... and to default IPv6 table
    interface "gre-redun0";
    interface "gre-redun1";
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel kernel_ipv4 {
    scan time 15;   # Scan kernel routing table every 15 seconds
#   presist;        # Don't remove routes on bird shutdown
    merge paths;    #
    ipv4 {          # Connect protocol to IPv4 table by channel
#	    table master4;	# Default IPv4 table is master4
#	    import all;	# Import to table, default is import all
#	    export all;	# Export to protocol. default is export none
        export filter { # "direct_ipv4" の経路を FIB に登録しない
            if proto = "direct_ipv4" then reject;
            accept;
        };
    };
#	learn;			# Learn alien routes from the kernel
#	kernel table 10;	# Kernel table to synchronize with (default: main)
}

# Another instance for IPv6, skipping default options
#protocol kernel {
#	ipv6 { export all; };
#}

# Static routes (Again, there can be multiple instances, for different address
# families and to disable/enable various groups of static routes on the fly).
#protocol static {
#	ipv4;			# Again, IPv4 channel with default options
#
#	route 0.0.0.0/0 via 198.51.100.10;
#	route 192.0.2.0/24 blackhole;
#	route 10.0.0.0/8 unreachable;
#	route 10.2.0.0/24 via "eth0";
#	# Static routes can be defined with optional attributes
#	route 10.1.1.0/24 via 198.51.100.3 { rip_metric = 3; };
#	route 10.1.2.0/24 via 198.51.100.3 { ospf_metric1 = 100; };
#	route 10.1.3.0/24 via 198.51.100.4 { ospf_metric2 = 100; };
#}

# Pipe protocol connects two routing tables. Beware of loops.
# protocol pipe {
#	table master4;		# No ipv4/ipv6 channel definition like in other protocols
#	peer table mrib4;
#	import all;		# Direction peer table -> table
#	export all;		# Direction table -> peer table
# }

# Define simple filter as an example for BGP import filter
# See https://gitlab.labs.nic.cz/labs/bird/wikis/BGP_filtering for more examples
# filter rt_import
# {
#	if bgp_path.first != 64496 then accept;
#	if bgp_path.len > 64 then accept;
#	if bgp_next_hop != from then accept;
#	reject;
# }

protocol bfd bfd_redun0 {
    interface "*" {
        min rx interval 2 s;
        min tx interval 3 s;
        idle tx interval 30 s;
    };
}

template bgp bgp_redun0 {
#   table ibgp0;
    local as my_asn0;
    ipv4 {
        export all;
        import all;
#       next hop self; # advertise this router as next hop
    };
    direct;    # Specify that the neighbor is directly connected.
#   startup hold time 240; # Default: 240 seconds
    hold time 180;  # Time in seconds to wait for a Keepalive message. Default: 240 seconds
    keepalive time 60;  # Delay in seconds between sending of two consecutive Keepalive messages. Default: One third of the hold time.
#   connect delay time 5;  # Delay in seconds between protocol startup and the first attempt to connect. Default: 5 seconds.
    connect retry time 30;  # Time in seconds to wait before retrying a failed attempt to connect. Default: 120 seconds.
    med metric on;  # Enable comparison of MED attributes.
    deterministic med on;   # BGP route selection algorithm is often viewed as a comparison between individual routes.
    default bgp_med 10; # Default: 0
    default bgp_local_pref 200; # Default: 100
    bfd on;
}

# == for bird-B-0 ==
#protocol bgp bird_A_0 from bgp_redun0 {
#    neighbor 10.10.20.10 as my_asn0; # bird-A-0
#}
#
#protocol bgp bird_A_1 from bgp_redun0 {
#    neighbor 10.10.20.11 as my_asn0; # bird-A-1
#}

# == for bird-B-1 ==
#protocol bgp bird_A_0 from bgp_redun0 {
#    neighbor 10.10.21.10 as my_asn0; # bird-A-0
#}
#
#protocol bgp bird_A_1 from bgp_redun0 {
#    neighbor 10.10.21.11 as my_asn0; # bird-A-1
#}

# == for bird-A-0/1 ==
#protocol bgp bird_B_0 from bgp_redun0 {
#    neighbor 10.10.20.20 as my_asn0; # bird-B-0
#}
#
#protocol bgp bird_B_1 from bgp_redun0 {
#    neighbor 10.10.21.21 as my_asn0; # bird-B-1
#}
#
#protocol bgp bird_gobgp_0 from bgp_redun0 {
#    neighbor 10.10.20.40 as my_asn0; # bird-gobgp
#    bfd off;
#}
#
#protocol bgp bird_gobgp_1 from bgp_redun0 {
#    neighbor 10.10.21.40 as my_asn0; # bird-gobgp
#    bfd off;
#}

# == for bird-A-0 ==
#protocol bgp bird_ToR from bgp_redun0 {
#    neighbor 10.10.30.30 as my_asn1; # bird-ToR-0
#}

# == for bird-A-1 ==
#protocol bgp bird_ToR from bgp_redun0 {
#    neighbor 10.10.31.30 as my_asn1; # bird-ToR-1
#}

# == for bird-ToR-0 ==
#protocol bgp bird_A_0 from bgp_redun0 {
#    neighbor 10.10.30.10 as my_asn1; # bird-A-0
#}

# == for bird-ToR-1 ==
#protocol bgp bird_A_1 from bgp_redun0 {
#    neighbor 10.10.31.11 as my_asn1; # bird-A-1
#}

